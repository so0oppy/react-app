## App.js 로 공부한 내용

import './App.css';
import {useState} from 'react';

function Header(props){ 
  console.log('props', props, props.title);
  return <header>
    <h1><a href="/" onClick={(event)=>{
      event.preventDefault(); //클릭되어도 href값으로 이동하지 않도록 prevent
      props.onChangeMode(); //alert를 넣은 onChangeMode함수 불러옴
    }}>{props.title}</a></h1>
  </header>
}
function Nav(props){
  const lis = []
  for(let i=0; i<props.topics.length; i++){
      let t = props.topics[i];
      lis.push(<li key={t.id}>
        <a id={t.id} href={'/read/'+t.id} onClick={event =>{
          event.preventDefault();
          props.onChangeMode(Number(event.target.id)); //event.target = 이벤트를 유발시킨 태그 = a태그
        }}>{t.title}</a>
      </li>)
      //REACT가 추적할 근거로서 key값을 부여
  }
  return <nav>
    <ol>
      {lis}
    </ol>
  </nav>
}
function Article(props){
  return <article>
    <h2>{props.title}</h2>
    {props.body}
  </article>
}
function Create(props){
  return <article>
    <h2>Create</h2>
    <form onSubmit={event=>{
      event.preventDefault(); //page reload(원래 이벤트)막음
      const title = event.target.title.value; //title의 value값을 가져올 수 있음
      const body = event.target.body.value; //body의 value값을 가져올 수 있음
      props.onCreate(title, body);
    }}>
      <p><input type="text" name="title" placeholder="title"/></p>
      <p><textarea name="body" placeholder="body"></textarea></p>
      <p><input type="submit" value="Create"></input></p>
    </form>
  </article>
}

function App() {
  // const _mode = useState('REACT');
  // const mode = _mode[0];
  // const setMode = _mode[1];
  const [mode, setMode] = useState('REACT'); //setMode는 state(setMode 외의 이름들도 가능)
  const [id, setId] = useState(null);
  const [nextId, setNextId] = useState(4);//id값이 3까지이므로
  const [topics, setTopics] = useState ([ //setTopics를 통해 읽기와 쓰기 인터페이스 추가
    {id:1, title:'html', body:'html is ...'},
    {id:2, title:'css', body:'css is ...'},
    {id:3, title:'javascript', body:'javascript is ...'}
  ]);
  let content = null;
  if(mode === 'REACT') {
    content = <Article title="Welcome" body="Hello, WEB"></Article>
  }else if(mode === 'READ'){
    let title, body = null;
    for(let i=0; i<topics.length; i++){
      if(topics[i].id === id){
        title = topics[i].title;
        body = topics[i].body;
      }
    }
    content = <Article title={title} body={body}></Article>
  } else if(mode === 'CREATE'){
    content = <Create onCreate={(_title, _body)=>{
      const newTopic = {id:nextId, title:_title, body:_body}
      const newTopics = [...topics]//topics를 복제한 복제본 만들어짐
      newTopics.push(newTopic);//복제본에 push하여 복제본을 바꿈
      setTopics(newTopics);//바꾼 복제본을 Topics로 전달 -> REACT는 topics와 복제본이 다르다면 그 때 컴포넌트 다시 렌더링함
      setMode('READ'); //상세페이지 보기로 모드를 바꿈
      setId(nextId); //다음 아이디로 미리 설정해둠
      setNextId(nextId+1); //nextId도 +1로 바꿈
    }}></Create>
  }
  return (
    <div>
      <Header title="REACT" onChangeMode={()=>{   //arrow function
        setMode('REACT');
      }}></Header>
      <Nav topics={topics} onChangeMode={(_id)=>{
        setMode('READ');
        setId(_id);
      }}></Nav>
      {content}
      <a href="/create" onClick={event=>{
        event.preventDefault();
        setMode('CREATE');
      }}>Create</a>
    </div>
  );
}

export default App;

//Prop - Component를 사용하는 외부 사용자를 위한 데이터
//State - Component를 만드는 내부자를 위한 데이터
//Prop과 State에 따라 return값이 달라짐

--------
22-09-15
App.js 공부했던 내용

import React, {useEffect, useState} from 'react';

function App() {

  const [backendData, setBackendData] = useState([{}])

  useEffect(() => {
    fetch("/api").then(
      response => response.json()
    ).then(
      data => {
        setBackendData(data)
      }
    )
  }, []) //대괄호가 있으면 한 번만 실행하고 더 이상 실행하지 않음

  return (
    <div>
      
      {(typeof backendData.users === 'undefined') ? (   //아직 users나 fetch할 api가 없는 경우
        <p>Loading ...</p>
      ): (     //있을 경우(else)
        backendData.users.map((user, i) => (
          <p key={i}>{user}</p>
        ))
      )}

    </div>
  );
}

export default App;